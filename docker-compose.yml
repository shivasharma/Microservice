version: '3.4'

networks:
  backend:
  frontend:
services:
  customerdb:
    container_name: customer-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=password@12345#
    networks:
      - backend
    ports:
      - 18001:1433

  productdb:
    container_name: product-db
    image: mysql:8.0.29-oracle
    environment:
      - MYSQL_ROOT_PASSWORD=password@12345#
    networks:
      - backend
    ports:
      - 18003:3306

  orderdb:
    container_name: order-db
    image: mongo 
    networks:
      - backend
    ports:
      - 18005:27017

  customerwebapi:
    container_name: customer-api
    image: ${DOCKER_REGISTRY-}customerwebapi
    build:
      context: .
      dockerfile: CustomerWebAPI/Dockerfile
    networks:
      - backend
    environment:
      - DB_HOST=customerdb
      - DB_NAME=dms_customer
      - DB_SA_PASSWORD=password@12345#

  productwebapi:
    container_name: product_api
    image: ${DOCKER_REGISTRY-}productwebapi
    build:
      context: .
      dockerfile: ProductAPI/Dockerfile
    networks:
      - backend
    environment:
      - DB_HOST=productdb
      - DB_NAME=dms_product
      - DB_ROOT_PASSWORD=password@12345#



  orderwebapi:
    container_name: order-api
    image: ${DOCKER_REGISTRY-}orderwebapi
    build:
      context: .
      dockerfile: OrderWebAPI/Dockerfile
    networks:
      - backend
    environment:
      - DB_HOST=orderdb
      - DB_NAME=dms_ordr
      
  apigateway:
    container_name: api-gateway
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - 8001:80
    networks:
      - backend
      - frontend
     

  blazorserverwebui:
    image: ${DOCKER_REGISTRY-}blazorserverwebui
    build:
      context: .
      dockerfile: BlazorServerWebUI/Dockerfile
    ports:
      - 8002:80
    networks:
      - frontend
